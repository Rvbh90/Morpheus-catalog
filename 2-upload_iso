#!/bin/bash

# Assign JSON to a variable
read -r -d '' JSON_INPUT <<EOF
{
  "vmemanager": {
    "hostname": "<%=customOptions.vme_mgr_name%>",
    "username": "<%=customOptions.vme_mgr_user_name%>",
    "password": "<%=customOptions.vme_mgr_user_pwd%>"
  },
  "cloud_user": "<%=customOptions.instance_username%>",
  "hostname": "<%=customOptions.infra_hostname%>",
  "static_ip": "<%=customOptions.infra_ip%>",
  "gateway": "<%=customOptions.instance_gateway%>",
  "dns": "<%=customOptions.instance_dns%>",
  "domain_name": "<%=customOptions.instance_domain%>",
  "image_name": "<%=customOptions.infra_img%>",
  "iso_url": "<%=customOptions.instance_iso%>",
  "os_type": "<%=customOptions.iso_type%>",
  "vm_password": "<%=customOptions.instance_passwd%>",
  "interface" : "<%=customOptions.net_int%>",
  "installer_ip": "<%=customOptions.installer_ip%>",
  "installer_hostname": "<%=customOptions.installer_hostname%>",
  "installer_image_name": "<%=customOptions.installer_img%>"
}
EOF

# Pass the JSON to Python using stdin
python3 - <<EOF
import json
import os
import requests
import crypt
import random
import string
import sys
import urllib3
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Read JSON from heredoc
json_input = """$JSON_INPUT"""
config = json.loads(json_input)

user_data = {
    "vmemanager": config["vmemanager"]
}

cloud_user = config["cloud_user"]
hostname = config["hostname"]
static_ip = config["static_ip"]
gateway = config["gateway"]
dns = config["dns"]
image_name = config["image_name"]
iso_url = config["iso_url"]
os_type = config["os_type"]
vm_password = config["vm_password"]
domain_name = config["domain_name"]
interface = config["interface"]

# Installer variants
installer_ip = config.get("installer_ip", "192.168.1.99")
installer_hostname = config.get("installer_hostname", f"{hostname}-installer")
installer_image_name = config.get("installer_image_name", f"{image_name}-installer")

def generate_sha512_hash(password):
    salt = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
    return crypt.crypt(password, f"\$6\${salt}")

def build_cloud_init_user_data(hostname, username, hashed_password, static_ip, gateway, domain_name, interface, dns):
    return f"""#cloud-config
runcmd:
  - [eval, 'echo \$(cat /proc/cmdline) "autoinstall" > /root/cmdline']
  - [eval, 'mount -n --bind -o ro /root/cmdline /proc/cmdline']
  - [eval, 'snap restart subiquity.subiquity-server']
  - [eval, 'snap restart subiquity.subiquity-service']
autoinstall:
  version: 1
  identity:
    hostname: {hostname}
    username: {username}
    password: "{hashed_password}"
  ssh:
    allow-pw: true
  network:
    version: 2
    ethernets:
      "{interface}":
        dhcp4: false
        addresses:
          - {static_ip}/24
        nameservers:
          search:
            - {domain_name}
          addresses:
            - {dns}
        routes:
          - to: default
            via: {gateway}
  packages:
    - openssh-server
"""

def get_access_token(user_data):
    url = f"https://{user_data['vmemanager']['hostname']}/oauth/token"
    payload = {
        "grant_type": "password",
        "client_id": "morph-api",
        "scope": "write",
        "username": user_data["vmemanager"]["username"],
        "password": user_data["vmemanager"]["password"]
    }
    headers = {
        "accept": "application/json",
        "content-type": "application/x-www-form-urlencoded"
    }

    try:
        response = requests.post(url, data=payload, headers=headers, verify=False)
        response.raise_for_status()
        token = response.json().get("access_token")
        if not token:
            print("❌ No access token found.")
        else:
            print("✅ Token fetched.")
        return token
    except Exception as e:
        print(f"❌ Error fetching token: {e}")
        return None

def register_virtual_image(hostname, token, image_name, iso_url, cloud_init_userdata, os_type):
    url = f"https://{hostname}/api/virtual-images"
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": f"Bearer {token}"
    }

    payload = {
        "virtualImage": {
            "isCloudInit": True,
            "installAgent": False,
            "osType": os_type,
            "visibility": "private",
            "isAutoJoinDomain": False,
            "virtioSupported": True,
            "vmToolsInstalled": True,
            "isForceCustomization": False,
            "trialVersion": False,
            "isSysprep": False,
            "name": image_name,
            "imageType": "iso",
            "url": iso_url,
            "userData": cloud_init_userdata
        }
    }

    try:
        response = requests.post(url, json=payload, headers=headers, verify=False)
        response.raise_for_status()
        print(f"✅ Image '{image_name}' registered successfully:")
        print(json.dumps(response.json(), indent=2))
    except requests.exceptions.HTTPError as e:
        print(f"❌ Failed to register image '{image_name}':")
        try:
            print(json.dumps(response.json(), indent=2))
        except:
            print(response.text)

if __name__ == "__main__":
    hashed_password = generate_sha512_hash(vm_password)

    images = [
        {
            "name": image_name,
            "hostname": hostname,
            "ip": static_ip
        },
        {
            "name": installer_image_name,
            "hostname": installer_hostname,
            "ip": installer_ip
        }
    ]

    token = get_access_token(user_data)
    if not token:
        print("❌ Aborting: Failed to get token.")
        sys.exit(1)

    for img in images:
        print(f"\n➡️ Registering image: {img['name']} with IP: {img['ip']}")

        cloud_init_userdata = build_cloud_init_user_data(
            hostname=img["hostname"],
            username=cloud_user,
            hashed_password=hashed_password,
            static_ip=img["ip"],
            gateway=gateway,
            domain_name=domain_name,
            interface=interface,
            dns=dns
        )

        register_virtual_image(
            hostname=user_data["vmemanager"]["hostname"],
            token=token,
            image_name=img["name"],
            iso_url=iso_url,
            cloud_init_userdata=cloud_init_userdata,
            os_type=os_type
        )
    time.sleep(30)
EOF
