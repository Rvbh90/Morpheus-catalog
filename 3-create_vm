#!/bin/bash

read -r -d '' JSON_INPUT <<EOF
{
  "vmemanager": {
    "hostname": "<%=customOptions.vme_mgr_name%>",
    "username": "<%=customOptions.vme_mgr_user_name%>",
    "password": "<%=customOptions.vme_mgr_user_pwd%>"
  },
  "cluster_name": "<%=customOptions.vme_cluster%>",
  "datastore_name": "<%=customOptions.mvm_store%>",
  "instances": [
    {
      "name": "<%=customOptions.infra_hostname%>",
      "hostname": "<%=customOptions.infra_hostname%>",
      "site_id": <%=customOptions.vme_grp%>,
      "instance_type_code": "MVM",
      "layout_id": <%=customOptions.vme_layout%>,
      "plan_id": "<%=customOptions.plan%>",
      "volume_sizes": "<%=customOptions.vm_disk_size%>",
      "network_ids": "<%=customOptions.vme_network%>",
      "target_image_name": "<%=customOptions.infra_img%>"
    },
    {
      "name": "<%=customOptions.installer_hostname%>",
      "hostname": "<%=customOptions.installer_hostname%>",
      "site_id": <%=customOptions.vme_grp%>,
      "instance_type_code": "MVM",
      "layout_id": <%=customOptions.vme_layout%>,
      "plan_id": "<%=customOptions.plan%>",
      "volume_sizes": "<%=customOptions.vm_disk_size%>",
      "network_ids": "<%=customOptions.vme_network%>",
      "target_image_name": "<%=customOptions.installer_img%>"
    }
  ]
}
EOF

python3 - << EOF
import json
import requests
import urllib3
import re
import sys
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

data = json.loads("""$JSON_INPUT""")

def get_access_token(user_data):
    url = f"https://{user_data['vmemanager']['hostname']}/oauth/token"
    payload = {
        "grant_type": "password",
        "client_id": "morph-api",
        "scope": "write",
        "username": user_data["vmemanager"]["username"],
        "password": user_data["vmemanager"]["password"]
    }
    headers = {
        "accept": "application/json",
        "content-type": "application/x-www-form-urlencoded"
    }

    try:
        response = requests.post(url, data=payload, headers=headers, verify=False)
        response.raise_for_status()
        print("✅ Access token fetched successfully")
        return response.json().get("access_token")
    except Exception as e:
        print(f"❌ Error fetching token: {e}")
        sys.exit(1)

def get_datastore_id(hostname, token, cluster_id, target_datastore_name):
    url = f"https://{hostname}/api/clusters/{cluster_id}/datastores/"
    headers = {
        "accept": "application/json",
        "authorization": f"Bearer {token}"
    }

    try:
        response = requests.get(url, headers=headers, verify=False)
        response.raise_for_status()
        datastores = response.json().get("datastores", [])
        for ds in datastores:
            if ds.get("name", "").lower() == target_datastore_name.lower():
                print(f"✅ Found datastore: {ds['name']} (ID: {ds['id']})")
                return ds["id"]
        print(f"❌ Datastore '{target_datastore_name}' not found.")
        return None
    except Exception as e:
        print(f"❌ Error fetching datastore ID: {e}")
        return None

def extract_volume_size(volume_sizes_str):
    match = re.search(r"size:(\d+)", volume_sizes_str)
    if match:
        return int(match.group(1))
    else:
        print("❌ Could not extract 'size' from volume_sizes string.")
        sys.exit(1)

def extract_network_id(network_ids_str):
    match = re.search(r"network:\[id:(network-\d+)\]", network_ids_str)
    if match:
        return match.group(1)
    else:
        print("❌ Could not extract 'network_id' from network_ids string.")
        sys.exit(1)

def extract_plan_id(plan_id_str):
    match = re.search(r"id:(\d+)", plan_id_str)
    if match:
        return int(match.group(1))
    else:
        print("❌ Could not extract 'plan_id' from plan_id string.")
        sys.exit(1)

def get_image_id_by_name(hostname, token, target_image_name):
    url = f"https://{hostname}/api/virtual-images?max=100&offset=0&filterType=User"
    headers = {
        "accept": "application/json",
        "authorization": f"Bearer {token}"
    }

    try:
        response = requests.get(url, headers=headers, verify=False)
        response.raise_for_status()
        images = response.json().get("virtualImages", [])
        matching_images = [
            img for img in images if target_image_name.lower() == img.get("name", "").lower()
        ]
        if matching_images:
            matching_images.sort(key=lambda x: x["id"], reverse=True)
            selected_image = matching_images[0]
            print(f"✅ Using image: {selected_image['name']} (ID: {selected_image['id']})")
            return selected_image["id"]
        else:
            print(f"❌ No image found matching '{target_image_name}'.")
            return None
    except Exception as e:
        print(f"❌ Error fetching image ID: {e}")
        return None

def wait_for_image_to_be_active(hostname, token, target_image_name, max_retries=30, interval_sec=10):
    url = f"https://{hostname}/api/virtual-images?max=100&offset=0&filterType=User"
    headers = {
        "accept": "application/json",
        "authorization": f"Bearer {token}"
    }

    for attempt in range(max_retries):
        try:
            response = requests.get(url, headers=headers, verify=False)
            response.raise_for_status()
            images = response.json().get("virtualImages", [])
            for img in images:
                if target_image_name.lower() in img.get("name", "").lower():
                    status = img.get("status", "Unknown")
                    print(f"🔄 Image '{img['name']}' found with status: {status}")
                    if status.lower() == "active":
                        print("✅ Image is active. Proceeding to create the instance.")
                        return True
                    else:
                        print("⏳ Waiting for image to become active...")
                    break
            else:
                print(f"⚠️ Image '{target_image_name}' not found. Retrying...")
        except requests.exceptions.RequestException as err:
            print(f"❌ Request failed: {err}")
        time.sleep(interval_sec)
    print("❌ Timeout: Image did not become active in time.")
    return False

def create_instance(api_base_url, token, instance_data, cluster_name, datastore_id):
    cluster_id = int(cluster_name.split("-")[-1])
    payload = {
        "instance": {
            "site": { "id": instance_data["site_id"] },
            "instanceType": { "code": instance_data["instance_type_code"] },
            "layout": { "id": instance_data["layout_id"] },
            "plan": { "id": instance_data["plan_id"] },
            "name": instance_data["name"],
            "hostName": instance_data["hostname"]
        },
        "copies": 1,
        "layoutSize": 1,
        "config": {
            "createUser": True,
            "imageId": instance_data["image_id"],
            "resourcePoolId": f"pool-{cluster_id}"
        },
        "volumes": [
            {
                "id": -1,
                "rootVolume": True,
                "name": "root",
                "size": instance_data["volume_size"],
                "datastoreId": datastore_id
            }
        ],
        "networkInterfaces": [
            {
                "ipMode": "dhcp",
                "network": { "id": instance_data["network_id"] }
            }
        ]
    }

    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": f"Bearer {token}"
    }

    try:
        response = requests.post(f"{api_base_url}/api/instances", json=payload, headers=headers, verify=False)
        response.raise_for_status()
        print("✅ Instance created successfully.")
        print(json.dumps(response.json(), indent=2))
        return response.json()
    except requests.exceptions.RequestException as e:
        print("❌ Failed to create instance:", e)
        if response is not None and response.content:
            print(response.text)
        sys.exit(1)

# ----------- MAIN -----------
hostname = data["vmemanager"]["hostname"]
cluster_name = data["cluster_name"]
datastore_name = data["datastore_name"]
cluster_id = int(cluster_name.split("-")[-1])
token = get_access_token(data)
datastore_id = get_datastore_id(hostname, token, cluster_id, datastore_name)

for instance_data in data["instances"]:
    instance_data["network_id"] = extract_network_id(instance_data["network_ids"])
    instance_data["volume_size"] = extract_volume_size(instance_data["volume_sizes"])
    instance_data["plan_id"] = extract_plan_id(instance_data["plan_id"])
    
    image_id = get_image_id_by_name(hostname, token, instance_data["target_image_name"])
    if not image_id:
        print("❌ Skipping: No valid image ID found.")
        continue

    if not wait_for_image_to_be_active(hostname, token, instance_data["target_image_name"]):
        print("❌ Skipping: Image did not become active.")
        continue

    instance_data["image_id"] = image_id

    if datastore_id:
        create_instance(
            api_base_url=f"https://{hostname}",
            token=token,
            instance_data=instance_data,
            cluster_name=cluster_name,
            datastore_id=datastore_id
        )
EOF
